import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Zheyuan Gao
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");

        /*
         * find the child content of the title tag under channel node
         */
        int titleTagIndex = getChildElement(channel, "title");

        //the case that the title is empty
        if (channel.child(titleTagIndex).numberOfChildren() == 0) {
            out.println("<title>Empty Title</title>");
        } else {
            //output the label of the first child of the title tag as the title
            out.println(
                    "<title>" + channel.child(titleTagIndex).child(0).label()
                            + "</title>");
        }
        out.println("</head>");
        out.println("<body>");

        /*
         * find the child content of the link tag under channel node
         */
        int linkTagIndex = getChildElement(channel, "link");
        if (channel.child(linkTagIndex).numberOfChildren() != 0) {
            out.println("   <h1>");
            if (channel.child(titleTagIndex).numberOfChildren() != 0) {
                out.println("       <a href = "

                        + channel.child(linkTagIndex).child(0).label() + ">"
                        + channel.child(titleTagIndex).child(0).label()
                        + "</a>");
            } else {
                out.println("       <a href = "
                        + channel.child(linkTagIndex).child(0).label()
                        + ">Empty Title</a>");
            }
            out.println("  </h1>");
        }

        /*
         * find the child content of the description tag under the channel node
         */
        int descriptionTagIndex = getChildElement(channel, "description");
        if (channel.child(descriptionTagIndex).numberOfChildren() == 0) {
            out.println("  <p>No description<p>");
        } else {
            out.println("  <p>"
                    + channel.child(descriptionTagIndex).child(0).label()
                    + "</p>");
        }

        out.println("<table border=\"1\">");
        out.println(" <tr>");
        out.println("      <th>Date</th>");
        out.println("      <th>Source</th>");
        out.println("      <th>News</th>");
        out.println(" </tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(" </table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int tagIndex = -1;
        int i = 0;
        int numOfChildren = xml.numberOfChildren();
        boolean done = false;
        while (!done) {
            if (xml.child(i).label().equals(tag)) {
                tagIndex = i;
                done = true;
            }
            if (i == numOfChildren - 1) {
                done = true;
            }
            i++;
        }
        return tagIndex;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * find the index of different elements
         */
        int pubDateTagIndex = getChildElement(item, "pubDate");
        int sourceTagIndex = getChildElement(item, "source");
        int titleTagIndex = getChildElement(item, "title");
        int linkTagIndex = getChildElement(item, "link");
        int descriptionTagIndex = getChildElement(item, "description");
        String pubDateContent = "";
        String sourceContent = "";
        String titleContent = "";
        String sourceURL = "";
        String linkContent = "";

        /*
         * find specific contents for different tags
         */
        if ((pubDateTagIndex == -1)
                || (item.child(pubDateTagIndex).numberOfChildren() == 0)) {
            pubDateContent = "No date available";
        } else {
            pubDateContent = item.child(pubDateTagIndex).child(0).label();
        }

        if ((sourceTagIndex == -1)
                || (item.child(sourceTagIndex).numberOfChildren() == 0)) {
            sourceContent = "No source available";
        } else if (item.child(sourceTagIndex).numberOfChildren() == 0) {
            if (item.child(sourceTagIndex).hasAttribute("url")) {
                sourceURL = item.child(sourceTagIndex).attributeValue("url");
                sourceContent = "No source available";
            } else {
                sourceContent = "No source available";
            }
        } else {

            sourceContent = item.child(sourceTagIndex).child(0).label();
            sourceURL = item.child(sourceTagIndex).attributeValue("url");
        }

        if (titleTagIndex > -1
                && item.child(titleTagIndex).numberOfChildren() != 0) {
            titleContent = item.child(titleTagIndex).child(0).label();
        } else if (descriptionTagIndex != -1
                && (item.child(descriptionTagIndex).numberOfChildren() != 0)) {
            titleContent = item.child(descriptionTagIndex).child(0).label();

        } else {
            titleContent = "No title avaiable";
        }

        if (linkTagIndex != -1) {
            linkContent = item.child(linkTagIndex).child(0).label();
        }

        /*
         * display the contents in the table
         */
        out.println("<tr>");
        out.println("   <td>" + pubDateContent + "</td>");

        if (sourceTagIndex != -1) {
            out.println("   <td>");
            out.println(
                    "   <a href=" + sourceURL + ">" + sourceContent + "</a>");
            out.println("   </td>");
        } else {
            out.println("   <td>");
            out.println("   " + sourceContent);
            out.println("   </td>");
        }

        if (linkTagIndex == -1) {
            out.println("   <td>" + titleContent + "</td>");
        } else {
            out.println("   <td>");
            out.println(
                    "   <a href=" + linkContent + ">" + titleContent + "</a>");
            out.println("   </td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        SimpleWriter outFile = new SimpleWriter1L(file);

        XMLTree feed = new XMLTree1(url);
        /*
         * first check if the input is a valid RSS 2.0 file
         */
        if (feed.label().equals("rss")
                && feed.attributeValue("version").equals("2.0")) {

            XMLTree channel = feed.child(0);
            outputHeader(channel, outFile);
            for (int j = 0; j < channel.numberOfChildren(); j++) {
                XMLTree channelChild = channel.child(j);
                if (channelChild.label().equals("item")) {
                    processItem(channelChild, outFile);
                }
            }
            outputFooter(outFile);
        }

        /*
         * close the simple writer
         */
        outFile.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Please enter a valid URL: ");
        String url = in.nextLine();
        out.print("Please enter an output file name: ");
        String outputFileName = in.nextLine();
        SimpleWriter outputFile = new SimpleWriter1L(outputFileName);
        XMLTree feeds = new XMLTree1(url);

        /*
         * Print the head for the introduction page
         */
        outputFile.println("<html>");
        outputFile.println("  <head>");
        outputFile.print(
                "    <title>" + feeds.attributeValue("title") + "</title>");
        outputFile.println();
        outputFile.println("</head>");

        /*
         * start to print different titles and link them to corresponding file
         */
        outputFile.println("<body>");
        outputFile.println("  <h2>" + feeds.attributeValue("title") + "</h2>");
        outputFile.println("  <ul>");
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            String urlText = feeds.child(i).attributeValue("url");
            String nameText = feeds.child(i).attributeValue("name");
            String fileText = feeds.child(i).attributeValue("file");
            processFeed(urlText, fileText, out);
            outputFile.println("    <li>");
            outputFile.println(
                    "        <a href=" + fileText + ">" + nameText + "</a>");
            outputFile.println("    </li>");
        }
        outputFile.println("  </ul>");
        outputFile.println("</body>");

        /*
         * output the footer for the HTML file
         */
        outputFile.println("</html>");

        /*
         * close the simple writer and simple reader
         */

        in.close();
        out.close();
        outputFile.close();
    }

}